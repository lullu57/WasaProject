openapi: 3.0.0
info:
  title: WasaProject
  description: The WASA Course Project, building an image sharing platform
  version: 1.0.0
tags:
  - name: login
  - name: user
  - name: comment
  - name: like
  - name: photo
  
security:
  - BearerAuth: []
paths:
  /session:
    post:
      tags:
        - login
      summary: Logs in the user
      description: |
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string 
                  example: Maria 
                  pattern: '^.*?$' 
                  minLength: 3 
                  maxLength: 16
        required: true
      responses:
        '201':
          description: New user created and logged in successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifier:
                    type: string
                    example: "abcdef012345"
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: Username already exists.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Username already exists"
        '500':
          $ref: '#/components/responses/ServerError'

  /users:
    post:
      tags: [user]
      summary: Adds a new User to users collection
      description: Adds a new user to the users collection
      operationId: addUser
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '201':
          description: action successful
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: Username already exists
          content:
            text/plain:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Username already exists"


  /stream:
    get:
      tags: [photo]
      summary: Returns the user's stream
      description: Returns the user's stream, which is a list of photos uploaded by the users they follow.
      operationId: getMyStream
      responses:
        '201':
          description: action successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Photo'
                minItems: 0
                maxItems: 100

        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/ServerError" }

  /users/{userId}:
    parameters:
    - name: userId
      in: path
      required: true
      schema:
        type: string
        description: The unique identifier of the user.
        pattern: "^[a-zA-Z0-9]+$"
        minLength: 1
        maxLength: 50
    get:
      tags: [user]
      summary: Get User Profile
      description: Get the profile of a user.
      operationId: getUserProfile
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/ServerError" }

  /users/{userId}/follows:
    parameters:
    - name: userId
      in: path
      required: true
      schema:
        type: string
        description: The unique identifier of the user.
        pattern: "^[a-zA-Z0-9]+$"
        minLength: 1
        maxLength: 50
    post:
      tags: [user]
      summary: Follow User
      description: Adds a new follow to the user's collection
      operationId: followUser
      responses:
        '201':
          description: action successful
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Success'

        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/ServerError" }

    delete:
      tags: [user]
      summary: Unfollow User
      description: Removes a follow from the user's follows collection
      operationId: unfollowUser
      responses:
        '201':
          description: action successful
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Success'

        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/ServerError" }

  /users/{userId}/bans:
    parameters:
    - name: userId
      in: path
      required: true
      schema:
        type: string
        pattern: "^[a-zA-Z0-9]+$"
        description: The unique identifier of the user to ban or unban.
        minLength: 1
        maxLength: 50
    post:
      tags: [user]
      summary: Ban User
      description: Adds a new ban to the user's bans collection
      operationId: banUser
      responses:
        '201':
          description: action successful
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Success'

        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/ServerError" }
    delete:
      tags: [user]
      summary: Unban User
      description: Removes a ban from the user's bans collection
      operationId: unbanUser
      responses:
        '201':
          description: action successful
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Success'

        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/ServerError" }

  /comments/{commentId}: 
    parameters:
      - name: commentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/commentId'
    delete:
      tags: [comment]
      summary: Remove Comment
      description: Removes a comment.
      operationId: uncommentPhoto
      responses:
        '201':
          description: action successful
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Success'

        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/ServerError" }
    
  /photos/{photoId}/comments:
    parameters:
        - name: photoId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/photoId'
    post:
      tags: [comment]
      summary: Add Comment
      description: Adds a new comment to the photo's comments collection
      operationId: commentPhoto
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        '201':
          description: action successful
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Success'

        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/ServerError" }

    get:
      tags: [comment]
      summary: Get Comments
      description: Get the comments of a photo.
      operationId: getComments
      responses:
        '200':
          description: Comments retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
                minItems: 0
                maxItems: 100

        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/ServerError" }

  /photos:
    post:
      tags: [photo]
      summary: Upload Photo
      description: Upload a photo.
      operationId: uploadPhoto
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Photo'
      responses:
        '201':
          description: action successful
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Success'

        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/ServerError" }
    get:
      tags: [photo]
      summary: Get Photos
      description: Retrieve all photos from the database.
      operationId: getPhotos
      responses:
        '200':
          description: List of photos retrieved successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Photo'
                minItems: 0
                maxItems: 100

        '500':
          $ref: '#/components/responses/ServerError'

  /photos/{photoId}:
    parameters:
    - name: photoId
      in: path
      required: true
      description: The unique identifier of the photo.
      schema:
        type: string
        pattern: "^[a-zA-Z0-9]+$"
        minLength: 1
        maxLength: 50
    get:
      tags: [photo]
      summary: Get Photo
      description: Returns a photo.
      operationId: getPhoto
      responses:
        '200':
          description: Photo retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Photo'

        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/ServerError" }
    delete:
      tags: [photo]
      summary: Remoove Photo
      description: Removes a photo from the photos collection
      operationId: deletePhoto
      responses:
        '201':
          description: action successful
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Success'

        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/ServerError" }

  /photos/{photoId}/likes:
    parameters:
    - name: photoId
      in: path
      required: true
      description: The unique identifier of the photo.
      schema:
        type: string
        pattern: "^[a-zA-Z0-9]+$"
        minLength: 1
        maxLength: 50
    get:
      tags: [like]
      summary: Checks Like status
      description: Returns whether a user liked a photo.
      operationId: isLiked
      responses:
        '200':
          description: Like retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Like'
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/ServerError" } 
    post:
      tags: [like]
      summary: Add Photo like
      description: Add a like to a photo.
      operationId: likePhoto
      responses:
        '201':
          description: action successful
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Success'

        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/ServerError" }

    delete:
      tags: [like]
      summary: Remove Like
      description: Removes a like from a photo.
      operationId: unlikePhoto
      responses:
        '201':
          description: action successful
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Success'

        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/ServerError" }

  /users/{userId}/username:
    parameters:
    - name: userId
      in: path
      required: true
      description: The unique identifier of the user.
      schema:
        type: string
        pattern: "^[a-zA-Z0-9]+$"
        minLength: 1
        maxLength: 50
    get:
      tags: [user]
      summary: Returns username
      description: Get the username of a user.
      operationId: getUsername
      responses:
        '201':
          description: Username retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/ServerError" }

  /users/username:
    patch:
      tags:
        - user
      summary: Sets Username
      description: Set the user's username.
      operationId: setMyUserName
      requestBody:
        description: New username to set for the user
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newUsername:
                  type: string
                  minLength: 3
                  maxLength: 50
                  pattern: "^[a-zA-Z0-9_]+$"
                  example: "new_username"
      responses:
        '200':
          description: Username updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Username updated successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
  /follows/{userId}: 
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
          description: The unique identifier of the user.
          pattern: "^[a-zA-Z0-9]+$"
          minLength: 1
          maxLength: 50
          
    get:
      tags: [user]
      summary: Get if the User Is Followed
      description: Check whether a user is followed by the current user.
      operationId: isUserFollowed
      responses:
        '200':
          description: Follow retrieved successfully
          content:
            application/json:
              schema:
                type: boolean
  /bans/{userId}: 
    parameters:
    - name: userId
      in: path
      required: true
      schema:
        type: string
        description: The unique identifier of the user.
        pattern: "^[a-zA-Z0-9]+$"
        minLength: 1
        maxLength: 50
    get:
      tags: [user]
      summary: Get if the User Is Banned
      description: Check whether a user is banned.
      operationId: isUserBanned
      responses:
        '200':
          description: Ban retrieved successfully
          content:
            application/json:
              schema:
                type: boolean
components:
  responses:
    BadRequest:
      description: Error Code 400
    Unauthorized:
      description: Error Code 401
    ServerError:
      description: Error Code 500
  schemas:
    Success:
      type: string
      description: A string message indicating the success of an operation.
      minLength: 1
      maxLength: 100
      pattern: '^[a-zA-Z0-9]+$'
    
    Comment:
      type: object
      description: A comment object representing a user's comment on a photo.
      properties:
        content:
          type: string
          description: The content of the comment.
          minLength: 1
          maxLength: 150
          pattern: '^[a-zA-Z0-9]+$'
        photoId:
          type: string
          description: The identifier of the photo being commented on.
          minLength: 10
          maxLength: 20
          pattern: '^[a-zA-Z0-9]+$'
        userId:
          type: string
          description: The identifier of the user who made the comment.
          minLength: 10
          maxLength: 20
          pattern: '^[a-zA-Z0-9_]+$'
        commentId:
          type: string
          description: The unique identifier of the comment.
          minLength: 10
          maxLength: 20
          pattern: '^[a-zA-Z0-9]+$'
    
    Photo:
      type: object
      description: A photo object representing a user's photo.
      properties:
        photoId:
          type: string
          description: The unique identifier of the photo.
          minLength: 10
          maxLength: 20
          pattern: '^[a-zA-Z0-9_]{10,20}$'
        userId:
          type: string
          description: The identifier of the user who uploaded the photo.
          minLength: 10
          maxLength: 20
          pattern: '^[a-zA-Z0-9_]{10,20}$'
        uploadTime:
          type: string
          format: date-time
          description: The timestamp of when the photo was uploaded.
        likes:
          type: array
          items:
            $ref: '#/components/schemas/Like'
          description: An array of likes associated with the photo.
          minItems: 0
          maxItems: 100
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
          description: An array of comments associated with the photo.
          minItems: 0
          maxItems: 100
    
    Like:
      type: object
      description: Represents a like made by a user to a photo.
      properties:
        userId:
          type: string
          description: The identifier of the user who liked the photo.
          minLength: 1
          maxLength: 50
          pattern: '^[a-zA-Z0-9_]+$'
        photoId:
          type: string
          description: The identifier of the photo being liked.
          minLength: 1
          maxLength: 50
          pattern: '^[a-zA-Z0-9_]+$'
        timestamp:
          type: string
          format: date-time
          description: The timestamp of when the like was made.
    
    commentId:
      type: string
      description: A unique identifier for a comment.
      minLength: 10
      maxLength: 20
      pattern: "^[a-zA-Z0-9_]+$"
    
    photoId:
      type: string
      description: A unique identifier for a photo.
      minLength: 10
      maxLength: 20
      pattern: "^[a-zA-Z0-9_]{10,20}$"
    
    User:
      type: object
      description: Represents a user, including information about their followers, who they're following, and their photos.
      properties:
        userId:
          type: string
          description: A unique identifier for the user.
          minLength: 10
          maxLength: 20
          pattern: "^[a-zA-Z0-9_]+$"
        username:
          type: string
          description: The username of the user.
          minLength: 3
          maxLength: 50
          pattern: "^[a-zA-Z0-9_]+$"
        followers:
          type: array
          items:
            type: string
            description: A unique identifier of a follower.
            minLength: 10
            maxLength: 20
            pattern: "^[a-zA-Z0-9_]+$"
          description: An array of unique identifiers for the user's followers.
          minItems: 0
          maxItems: 100
        following:
          type: array
          items:
            type: string
            description: A unique identifier of a followed user.
            minLength: 10
            maxLength: 20
            pattern: "^[a-zA-Z0-9_]+$"
          description: An array of unique identifiers for the users being followed by the user.
          minItems: 0
          maxItems: 100
        photos:
          type: array
          items:
            type: string
            description: A unique identifier of a photo uploaded by the user.
            minLength: 10
            maxLength: 20
            pattern: "^[a-zA-Z0-9_]+$"
          description: An array of unique identifiers for the photos uploaded by the user.
          minItems: 0
          maxItems: 100
      required:
        - userId
        - username

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT 